 TITLE ЛАБ6
;------------------------------------------------------------------------------
;ЛР  №3
;------------------------------------------------------------------------------
; Програмування 3. Системне програмування
; Завдання:    	Основи розробки і налагодження
; ВУЗ:  		КНУУ "КПІ"
; Факультет:  	ФІОТ
; Курс: 		1
; Група:     	IT-03
; Команда: 		9
;------------------------------------------------------------------------------
; Дата:         _11_/_05_/_2021_
IDEAL

MACRO M_Exit	; Вихід з програми
mov	ah, 04Ch ; Номер вектора переривання DOS для виходу
int	21h	; Виклик переривання
ENDM

MACRO M_Init	; Ініціалізація DS і ES
mov	ax, @data	; ax <- @data 
mov	ds, ax	; ds <- ax
mov ax, 0
	
mov	es, ax	; es <- ax
ENDM

MODEL small 
STACK 256 

DATASEG

old_offset	DW 10h ; Змінна зміщення переривання, що перезаписується
old_seg	DW ? ; Змінна під сегмент переривання, що перезаписується 
mesg db "Group number:",9,"9",10
db 13,10,13,"Members:",10,13,10,13
db "Filonenko VP",10,13
db "Kruvoruk MM",10,13
db "Davudenko DE",10,13,'$'

team = 9 ; Номер команди
custom_int dw ? ; Змінна для номера переривання, яке перевизначаємо

CODESEG
Start:

M_Init	

mov [custom_int], 50 + team ; номер необхідного переривання

; ----- Отримання адреси обробника цільового переривання ----


mov	di, [custom_int]	; Вхідний параметр для процедури GetIntVector

call GIntV	

mov	[old_offset], bx ; Запам’ятовуємо зміщення обробника
mov	[old_seg], es ; Запам’ятовуємо сегмент обробника

; ------------- Встановлення кастомного обробника ------------

; Вхідні параметри для процедури SetIntVector
mov di, [custom_int]
mov dx, offset int_custom ; У DX записуємо зміщення нашої кастомної процедури в сегменті коду
mov ax, seg int_custom ; Записуємо логічну адресу сегменту коду
mov es, ax 

call SIntV

; -------- Виклик переривання з кастомним обробником -------

int 59

; ---- Повернення вектора переривання до початкового стану---

; Вхідні параметри для процедури SIntV
mov	di, [custom_int] 
mov	dx, [old_offset] ; Записуємо зміщення, що було спочатку в вектора цільового переривання
mov	ax, [old_seg] ; Записуємо сегмент, що був спочатку в вектора цільового переривання 

mov	es, ax
call SIntV
xor	al, al

M_Exit	



;------------------------------------------------------------------------------
; Призначення: Установка на номер вектора нової функції обробника.
; Функціонально: до пам’яті що відповідає вектору заносимо ефективну адресу і адресу сегменту нового обробника переривань
; На вхід:DI - номер переривання де буде нова процедура
;  DX - ефективна адреса нового обробника
;  ES - адреса сегмента нового обробника
; На вихід: ---
;------------------------------------------------------------------------------
; Автор:  
; Дата:         __/__/__
;---------------------------------


PROC SIntV
cli ; Заборона апаратних переривань

; Поміщаємо в стек регістри, значення яких хочемо залишити недоторканним
push ax
push di
push ds

xor	ax, ax ; AX <- 0
mov ds, ax	; DS <- 0
shl	di, 2 ; DI <- DI * 4
mov	[ds:[di]], dx ; Перезаписуємо зміщення у векторі переривання 
mov	[ds:[di + 2]], es ; Перезаписуємо сегмент у векторі переривання 

; Відновлюємо попередні значення регістрів зі стеку
pop	ds
pop	di
pop	ax

sti ; Дозвіл апаратних переривань
ret	
ENDP 


;------------------------------------------------------------------------------
; Процедура - кастомний обробник для переривання. Друкує на екран прізвища членів команди та номер команди
; Вхід: --
; Вихід: --
;------------------------------------------------------------------------------
; Автор:  
; Дата:         __/__/__
;---------------------------------
PROC int_custom

mov ax, 03h
int 10h ; Очищення екрану
mov ah, 09h ; Ф-я виводу рядка на екран
mov dx, offset mesg ; DX <- зміщення змінної mesg
int 21h ; Переривання DOS 21h
; Код за кінчення апаратного переривання
mov	al, 20h
out	20h, al
iret	; Вихід з процедури обробника переривання
ENDP 

;------------------------------------------------------------------------------
; Призначення: Отримання логічної адреси процедури (функції) обробки переривання за номером вектора переривання
; Вхід:DI <- номер вектора переривання
; Вихід:BX,ES <- Ефективна адреса та сегмент процедури (функції) обробки переривання
;------------------------------------------------------------------------------
; Автор:  
; Дата:         __/__/__
;---------------------------------

PROC GIntV
; Поміщаємо в стек регістри, значення яких хочемо залишити недоторканним
push ax
push di

xor	ax, ax ; AX <- 0
mov	es, ax ; ES <- 0
shl	di, 2 ; DI <- DI * 4
mov	bx, [es:[di]] ; В BX записуємо зміщення процедруи обробника, що знаходиться у векторі переривання
mov	ax, [es:[di + 2]] ; В AX записуємо сегмент процедруи обробника, що знаходиться у векторі переривання
mov	es, ax	

; Відновлюємо попередні значення регістрів зі стеку
pop	di
pop	ax
ret
ENDP 




END Start 